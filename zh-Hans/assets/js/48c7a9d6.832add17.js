"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[151],{7130:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"malloc_chunk","metadata":{"permalink":"/zh-Hans/blog/malloc_chunk","editUrl":"https://github.com/yechs/website/edit/master/blog/blog/2021-08-13-malloc_chunks.mdx","source":"@site/i18n/zh-Hans/docusaurus-plugin-content-blog/2021-08-13-malloc_chunks.mdx","title":"\u5185\u5b58\u6cc4\u6f0f \u4e0e malloc chunk","description":"\u6211\u4e3a\u4ec0\u4e48\u5199\u8fd9\u7bc7\u6587\u7ae0","date":"2021-08-13T00:00:00.000Z","formattedDate":"2021\u5e748\u670813\u65e5","tags":[{"label":"c++","permalink":"/zh-Hans/blog/tags/c"},{"label":"pwn","permalink":"/zh-Hans/blog/tags/pwn"}],"readingTime":23.555,"truncated":true,"authors":[{"name":"Ye Shu","title":"Studying how C++ allocates and frees chunks in memory","url":"https://github.com/yechs","imageURL":"https://avatars.githubusercontent.com/u/49149993"}],"nextItem":{"title":"Me and My Broken Site(s)","permalink":"/zh-Hans/blog/welcome"}},"content":"## \u6211\u4e3a\u4ec0\u4e48\u5199\u8fd9\u7bc7\u6587\u7ae0 {#how-it-all-started}\\n\\n\u5728\u6211\u6691\u671f\u5b9e\u4e60\u671f\u95f4 debug \u4e00\u4e2a\u5185\u5b58\u6cc4\u6f0f\u7684\u95ee\u9898\u65f6\uff0c\u6211\u53d1\u73b0\u6211\u4f7f\u7528\u7684\u5176\u4e2d\u4e00\u4e2a API return \u4e86\u4e00\u4e2a\u88f8\u6307\u9488\uff0c\u4ece\u800c\u628a\u8fd9\u4e2a\u76ee\u6807\u7684 ownership \u8f6c\u79fb\u7ed9\u4e86\u8c03\u7528\u8005\uff08\u6211\uff09\u3002\u6362\u8a00\u4e4b\uff0c\u6211\u73b0\u5728\u9700\u8981\u8d1f\u8d23\u5728\u4ee3\u7801\u8fd0\u884c\u5b8c\u6bd5\u4e4b\u540e\u624b\u52a8 `delete` \u6389\u8fd9\u4e2a\u6307\u9488\u3002\u5c3d\u7ba1\u8fd9\u662f\u4e00\u4e2a [\u975e\u5e38\u7cdf\u7cd5\u7684\u5de5\u7a0b\u5b9e\u8df5](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#i11-never-transfer-ownership-by-a-raw-pointer-t-or-reference-t)\uff0c\u6211\u5f00\u59cb\u5bf9\u5185\u5b58\u6cc4\u6f0f\u662f\u5982\u4f55\u4ea7\u751f\u7684\uff0c\u4ee5\u53ca `delete[]` \u662f\u5982\u4f55\u5220\u9664\u5185\u5b58\u7684\u4ea7\u751f\u4e86\u5174\u8da3\u3002\\n\\n\u5728\u505a\u4e86\u4e00\u4e9b\u7814\u7a76\u4e0e\u5b9e\u9a8c\u540e\uff0c\u6211\u5199\u4e0b\u4e86\u8fd9\u7bc7\u6587\u7ae0\u3002\u672c\u6587\u5c06\u8bd5\u56fe\u56de\u7b54\u4e09\u7ec4\u95ee\u9898\uff1a\\n\\n1. \u4ec0\u4e48\u662f\u5185\u5b58\u6cc4\u6f0f\uff1f\\n2. \u5bf9\u8c61\u662f\u5982\u4f55\u5728 \u5806 (heap) \u4e0a\u88ab\u5206\u914d\u7684\uff1f`delete[]` \u5982\u4f55\u77e5\u9053\u5b83\u9700\u8981\u91ca\u653e\u54ea\u5757\u5185\u5b58\uff1f\\n3. \u6211\u4eec\u5982\u4f55\u9884\u9632\u5185\u5b58\u6cc4\u6f0f\uff1f\\n\\n\x3c!--truncate--\x3e\\n\\nStack Overflow \u4e0a\u7684\u95ee\u9898 [\\"How does delete[] \'know\' the size of the operand array?\\"](https://stackoverflow.com/questions/197675/how-does-delete-know-the-size-of-the-operand-array) \u5176\u5b9e\u5df2\u7ecf\u5927\u81f4\u56de\u7b54\u4e86\u6211\u4eec\u7684\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff0c\u4f46\u6211\u8fd8\u662f\u51b3\u5b9a\u66f4\u6df1\u5165\u5730\u63a2\u8ba8\u4e00\u4e0b\u5b9e\u9645\u7684\u5185\u5b58\u7a7a\u95f4\u662f\u4ec0\u4e48\u6837\u7684\u3002\\n\\n\u5de7\u5408\u7684\u662f\uff0c\u6211\u548c\u670b\u53cb [@gzhding](https://guozhen.dev) \u521a\u597d\u5728\u6700\u8fd1\u7684\u4e00\u6b21 CTF \u6bd4\u8d5b\u4e2d\u5408\u4f5c\u4e86\u4e00\u9053 \u5806\u5229\u7528 (heap exploitation) \u7684\u9898\u76ee\u3002\u56e0\u4e3a\u8fd9\u4efd\u7ecf\u5386\uff0c\u6211\u5b66\u4f1a\u4e86\u5982\u4f55\u4f7f\u7528 `gdb` \u8c03\u8bd5\u5e76\u67e5\u770b\u5806\u4e0a\u7684\u5185\u5b58\uff0c\u4ee5\u501f\u5176\u7ba1\u4e2d\u7aa5\u8c79\u3002\\n\\n:::info\\n\u6ce8\uff1a\u6211\u5148\u5199\u6210\u4e86\u672c\u6587\u7684\u82f1\u6587\u7248\uff0c\u4e4b\u540e\u624d\u8bd5\u56fe\u5c06\u5176\u8bd1\u56de\u4e2d\u6587\u3002\u56e0\u6b64\u5982\u6709\u53ef\u80fd\u7684\u8bdd\uff0c\u8bf7[\u4ee5\u82f1\u6587\u9605\u8bfb\u672c\u6587](https://shuye.dev/blog/malloc_chunk/)\uff0c\u4ee5\u907f\u514d\u4e00\u4e9b\u56e0\u4e3a\u7ffb\u8bd1\u8d28\u91cf\u5bfc\u81f4\u7684\u8bed\u53e5\u4e0d\u987a\u4e0e\u7406\u89e3\u56f0\u96be\u3002\\n:::\\n\\nimport TOCCollapsible from \'@theme/TOCCollapsible\';\\n\\n<TOCCollapsible toc={toc} />\\n\\n## \u4ec0\u4e48\u662f\u5185\u5b58\u6cc4\u6f0f {#what-are-memory-leaks}\\n\\n\u6211\u4eec\u77e5\u9053 [C++ \u80fd\u591f\u5728\u5806\u4e0a\u52a8\u6001\u5730\u5206\u914d\u5185\u5b58](https://www.cplusplus.com/doc/tutorial/dynamic/)\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u4f8b\u5b50\u662f\u4f7f\u7528 `new[]` \u521b\u5efa\u6570\u7ec4\uff0c\u4ee5\u53ca `delete[]` \u5220\u9664\u6570\u7ec4\u3002\\n\\n\u5f53\u6211\u4eec\u5728\u5185\u5b58\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u6570\u7ec4\uff08\u5373\u5206\u914d\u4e86\u4e00\u6bb5\u5185\u5b58\u7528\u4ee5\u5b58\u50a8\u8fd9\u4e2a\u5bf9\u8c61\uff09\u800c\u53c8\u5fd8\u8bb0\u5220\u9664\u5b83\u65f6\uff0c[\u5185\u5b58\u6cc4\u6f0f](https://en.wikipedia.org/wiki/Memory_leak) \u5c31\u4f1a\u53d1\u751f\u3002\u5f53\u6307\u5411\u8fd9\u6bb5\u5185\u5b58\u7684\u6307\u9488\u8d85\u51fa\u4f5c\u7528\u57df (scope) \u65f6\uff0c\u6b63\u5728\u8fd0\u884c\u7684\u4ee3\u7801\u5c31\u4e22\u5931\u4e86\u5bf9\u88ab\u5206\u914d\u7684\u5185\u5b58\u7684\u77e5\u8bc6\u3002\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5185\u5b58\u6cc4\u6f0f\u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u53d1\u751f\uff0c\u65b0\u5206\u914d\u7684\u5185\u5b58\u80fd\u591f\u6301\u7eed\u5730\u5806\u79ef\u800c\u4e0d\u88ab\u91ca\u653e\uff0c\u6700\u7ec8\u4f7f\u5f97\u7535\u8111\u53d8\u6162\u751a\u81f3\u5d29\u6e83\u3002\\n\\n### PoC {#poc}\\n\\n\u4ee5\u4e0b\u6709\u4e00\u6bb5\u7b80\u5355\u7684 Proof of Concept (PoC) \u4ee3\u7801\u3002\u5176\u4e2d\u7684 `main()` \u51fd\u6570\u8c03\u7528\u4e86 `memory_leak()` \u51fd\u6570\uff0c\u540e\u8005\u53c8\u521b\u5efa\u4e86\u4e00\u4e2a\u7531 26 \u4e2a `char` \u7ec4\u6210\u7684\u6570\u7ec4\uff0c\u5e76\u5c06\u5927\u5199\u82f1\u6587\u5b57\u6bcd\u586b\u5165\u5b83\u4eec\u3002\\n\\n```cpp title=\\"memory_leak.cpp\\"\\nvoid memory_leak() {\\n    // Always delete pointers created by new to avoid memory leaks!\\n    char *arr = new char[26];\\n\\n    for (int i = 0; i < 26; i++) {\\n        arr[i] = char(65 + i); // 65 is the ascii of \'A\'\\n    }\\n\\n    // The memory area is not freed!\\n    // delete[] arr;\\n}\\n\\nint main() {\\n    memory_leak();\\n    return 0;\\n}\\n```\\n\\n\u56e0\u4e3a `delete[]` \u8bed\u53e5\u5df2\u7ecf\u88ab\u6ce8\u91ca\u6389\uff0c\u5f53\u51fd\u6570 `memory_leak()` return \u65f6\uff0c\u6307\u9488 `arr` \u4f1a\u8d85\u51fa\u4f5c\u7528\u57df (scope) \u5e76\u5bfc\u81f4\u8fd9\u4e00\u5185\u5b58\u533a\u57df\u88ab\u6cc4\u6f0f\u3002\\n\\n### \u521d\u63a2\u5185\u5b58 {#a-deeper-look-into-the-memory}\\n\\n:::note\\n\u6211\u4f7f\u7528\u4e86 [GEF](https://github.com/hugsy/gef) (GDB Enhanced Features) \u800c\u4e0d\u662f\u539f\u751f GDB \u4ee5\u83b7\u53d6\u7ecf\u8fc7\u7f8e\u5316\u7684\u8f93\u51fa\u4ee5\u53ca\u8bf8\u5982 `heap` \u4e00\u7c7b\u7684\u989d\u5916\u529f\u80fd\u3002\\n:::\\n\\n\u8ba9\u6211\u4eec\u4ee5 `g++ -g3 memory_leak.cpp -o memory_leak` \u6765\u7f16\u8bd1\u8fd9\u4e2a\u7a0b\u5e8f\uff08`-g3` flag \u4f1a\u5728\u7f16\u8bd1\u65f6\u4fdd\u5b58\u7a0b\u5e8f\u7684\u8c03\u8bd5\u4fe1\u606f\uff09\u5e76\u4f7f\u7528 `gdb` \u6765\u9a8c\u8bc1\u8fd9\u4e00\u5185\u5b58\u6cc4\u6f0f\u3002\\n\\n\u6211\u4eec\u5c06\u4f1a\u5728 `memory_leak()` \u51fd\u6570\u7684\u6700\u540e\u6253\u4e00\u4e2a\u65ad\u70b9\uff0c\u5e76\u8fd0\u884c\u7a0b\u5e8f\u76f4\u5230\u5176\u89e6\u53d1\u65ad\u70b9\u3002\\n\\n```console\\n$ gdb memory_leak\\n\\ngef\u27a4  b 11\\nBreakpoint 1 at 0x1179: file memory_leak.cpp, line 11.\\n\\ngef\u27a4  r\\n[...]\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 source:memory_leak.cpp+11 \u2500\u2500\u2500\u2500\\n      6          arr[i] = char(65 + i); // 65 is the ascii of \'A\'\\n      7      }\\n      8\\n      9      // The memory area is not freed!\\n     10      // delete[] arr;\\n\u25cf\u2192   11  }\\n     12\\n     13  int main() {\\n     14      memory_leak();\\n     15      return 0;\\n     16  }\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 threads \u2500\u2500\u2500\u2500\\n[#0] Id 1, Name: \\"memory_leak\\", stopped 0x555555555179 in memory_leak (), reason: BREAKPOINT\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 trace \u2500\u2500\u2500\u2500\\n[#0] 0x555555555179 \u2192 memory_leak()\\n[#1] 0x555555555186 \u2192 main()\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n\\ngef\u27a4  info locals\\narr = 0x55555556aeb0 \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\"\\n\\ngef\u27a4  x/8xw 0x55555556aeb0\\n0x55555556aeb0: 0x44434241      0x48474645      0x4c4b4a49      0x504f4e4d\\n0x55555556aec0: 0x54535251      0x58575655      0x00005a59      0x00000000\\n```\\n\\n\u5728\u7a0b\u5e8f\u89e6\u53d1\u65ad\u70b9\u540e\uff0c\u6211\u4eec\u6253\u5370\u51fa\u6307\u9488 `arr` \u6307\u5411\u7684\u5730\u5740\u53ca\u8fd9\u5757\u5185\u5b58\u7684\u5185\u5bb9\u3002\u6ce8\u610f\u5185\u5b58\u662f\u4ee5 [\u5c0f\u7aef\u5e8f](https://zh.wikipedia.org/zh-cn/%E5%AD%97%E8%8A%82%E5%BA%8F#%E5%B0%8F%E7%AB%AF%E5%BA%8F) \u5b58\u50a8\u7684\uff0c\u56e0\u6b64 `0x44` (D) \u6392\u5728 `0x43` (C)\uff0c`0x42` (B)\uff0c\u4ee5\u53ca `0x41` (A) \u4e4b\u524d\u3002\\n\\n\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u7ee7\u7eed\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u76f4\u5230\u51fd\u6570 `memory_leak()` \u8fd0\u884c\u5b8c\u6bd5\u8fd4\u56de\u81f3 `main()`\u3002\\n\\n```gdb\\ngef\u27a4  finish\\n[...]\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 source:memory_leak.cpp+15 \u2500\u2500\u2500\u2500\\n     10      // delete[] arr;\\n\u25cf    11  }\\n     12\\n     13  int main() {\\n     14      memory_leak();\\n \u2192   15      return 0;\\n     16  }\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 threads \u2500\u2500\u2500\u2500\\n[#0] Id 1, Name: \\"memory_leak\\", stopped 0x555555555186 in main (), reason: TEMPORARY BREAKPOINT\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 trace \u2500\u2500\u2500\u2500\\n[#0] 0x555555555186 \u2192 main()\\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\\n\\ngef\u27a4  info locals\\nNo locals.\\n\\ngef\u27a4  x/8xw 0x55555556aeb0\\n0x55555556aeb0: 0x44434241      0x48474645      0x4c4b4a49      0x504f4e4d\\n0x55555556aec0: 0x54535251      0x58575655      0x00005a59      0x00000000\\n```\\n\\n\x3c!-- gef\u27a4  heap chunks\\nChunk(addr=0x555555559010, size=0x290, flags=PREV_INUSE)\\n    [0x0000555555559010     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................]\\nChunk(addr=0x5555555592a0, size=0x11c10, flags=PREV_INUSE)\\n    [0x00005555555592a0     00 1c 01 00 00 00 00 00 00 00 00 00 00 00 00 00    ................]\\nChunk(addr=0x55555556aeb0, size=0x30, flags=PREV_INUSE)\\n    [0x000055555556aeb0     41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50    ABCDEFGHIJKLMNOP]\\nChunk(addr=0x55555556aee0, size=0xf130, flags=PREV_INUSE)  \u2190  top chunk --\x3e\\n\\n\u65e2\u7136 `memory_leak()` return \u4e86\uff0c\u6211\u4eec\u5c31\u4e22\u5931\u4e86\u6307\u5411\u5185\u5b58\u5730\u5740 `0x55555556aeb0` \u7684\u6307\u9488 `arr`\u3002\u4f46\u5f53\u6211\u4eec\u6253\u5370\u51fa\u5185\u5b58\u533a\u57df\u65f6\uff0c\u53d1\u73b0\u8fd9\u4e9b\u6570\u636e\u4ecd\u7136\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\uff0c\u6ca1\u6709\uff08\u4e5f\u4e0d\u4f1a\uff09\u88ab\u91ca\u653e\u3002\u8fd9\u5c31\u662f\u5185\u5b58\u6cc4\u6f0f\u3002\\n\\n### \u5229\u7528 Valgrind \u8fdb\u884c\u9a8c\u8bc1 {#verification-with-valgrind}\\n\\n\u6b64\u5916\uff0c\u6211\u4eec\u80fd\u591f\u4f7f\u7528\u5982 [Valgrind](https://valgrind.org) \u4e00\u6837\u7684\u81ea\u52a8\u5316\u5de5\u5177\u6765\u68c0\u67e5\u5185\u5b58\u6cc4\u6f0f\u3002\\n\\n```console\\n$ valgrind --leak-check=full ./memory_leak\\n==382643== Memcheck, a memory error detector\\n==382643== Copyright (C) 2002-2017, and GNU GPL\'d, by Julian Seward et al.\\n==382643== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\\n==382643== Command: ./memory_leak\\n==382643==\\n==382643==\\n==382643== HEAP SUMMARY:\\n==382643==     in use at exit: 26 bytes in 1 blocks\\n==382643==   total heap usage: 2 allocs, 1 frees, 72,730 bytes allocated\\n==382643==\\n==382643== 26 bytes in 1 blocks are definitely lost in loss record 1 of 1\\n==382643==    at 0x484021F: operator new[](unsigned long) (vg_replace_malloc.c:579)\\n==382643==    by 0x10914A: memory_leak() (memory_leak.cpp:3)\\n==382643==    by 0x109185: main (memory_leak.cpp:14)\\n==382643==\\n==382643== LEAK SUMMARY:\\n==382643==    definitely lost: 26 bytes in 1 blocks\\n==382643==    indirectly lost: 0 bytes in 0 blocks\\n==382643==      possibly lost: 0 bytes in 0 blocks\\n==382643==    still reachable: 0 bytes in 0 blocks\\n==382643==         suppressed: 0 bytes in 0 blocks\\n==382643==\\n==382643== For lists of detected and suppressed errors, rerun with: -s\\n==382643== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\\n```\\n\\n## \u5bf9\u8c61\u662f\u5982\u4f55\u5728\u5806 (heap) \u4e0a\u88ab\u5206\u914d\u7684 {#how-are-objects-allocated-on-the-heap}\\n\\n\u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3\u5185\u5b58\u6cc4\u6f0f\u80cc\u540e\u7684\u673a\u5236\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3 C++ \u662f\u5982\u4f55\u5206\u914d\u4ee5\u53ca\u91ca\u653e\u5185\u5b58\u7684\u3002\u6362\u8a00\u4e4b\uff0c`new` \u4e0e `delete` \u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u8ba9\u6211\u4eec\u4e00\u8d77\u6df1\u5165\u8fdb GNU \u7684 `libstdc++` \u5b9e\u73b0\uff08g++ \u9ed8\u8ba4\u4f7f\u7528\u7684\u5e93\uff09\u7684\u6e90\u7801\u3002\\n\\n### `new` \u4e0e `delete` \u662f\u5982\u4f55\u5de5\u4f5c\u7684 {#how-new-and-delete-works}\\n\\n:::info\\n\u56e0\u4e3a `new` \u4e0e `delete` \u64cd\u4f5c\u7b26\u4ec5\u4ec5\u662f C++ \u6807\u51c6\u4e2d\u5b9a\u4e49\u7684 interface\uff0c\u5b83\u4eec\u62e5\u6709\u4e0d\u540c\u7684\u5b9e\u73b0\u3002\u6211\u5728\u6b64\u5904\u5c06\u4f7f\u7528 GNU \u5728 gcc 11.2 \u7248\u672c\u4e2d\u63d0\u4f9b\u7684 `libstdc++` \u7684 [\u6e90\u7801](https://github.com/gcc-mirror/gcc/tree/releases/gcc-11.2.0)\u3002\\n:::\\n\\n#### `new[]` \u548c `delete[]` \u53ea\u662f\u5bf9 `new` \u548c `delete` \u7684\u5c01\u88c5 {#new-and-delete-are-just-wrappers-of-new-and-delete}\\n\\n\u6709\u610f\u601d\u7684\u662f\uff0c\u4ece `operator new[]` \u7684\u5b9e\u73b0\uff08[\u6e90\u7801](https://github.com/gcc-mirror/gcc/blob/releases/gcc-11.2.0/libstdc++-v3/libsupc++/new_opv.cc#L29-L33)\uff09\u6765\u770b\uff0c`new[]` \u5728 `stdlibc++` \u4e2d\u53ea\u662f `new` \u7684\u4e00\u4e2a\u522b\u540d\u3002\\n\\n```cpp title=\\"/libstdc++-v3/libsupc++/new_opv.cc:L29-33\\"\\n_GLIBCXX_WEAK_DEFINITION void*\\noperator new[] (std::size_t sz) _GLIBCXX_THROW (std::bad_alloc)\\n{\\n  return ::operator new(sz);\\n}\\n```\\n\\n\u5bf9 `delete[]`\uff08[\u6e90\u7801](https://github.com/gcc-mirror/gcc/blob/releases/gcc-11.2.0/libstdc++-v3/libsupc++/del_opv.cc#L32-L36)\uff09\u800c\u8a00\u4ea6\u662f\u5982\u6b64\uff0c\u5b83\u4e0d\u8fc7\u662f `delete` \u7684\u522b\u540d\u3002\\n\\n:::caution\\n\u6839\u636e GNU stdlibc++ \u7684\u5b9e\u73b0\u6765\u770b\uff0c\u4f3c\u4e4e\u6df7\u5408\u4f7f\u7528 `new[]` \u4e0e `new`\uff0c\u4ee5\u53ca `delete[]` \u4e0e `delete` \u662f\u5b8c\u5168\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\\n\\n\u4f46\u662f\uff0c\u4f60\u5e94\u5f53\u907f\u514d\u8fd9\u4e48\u505a\uff0c\u56e0\u4e3a\u8fd9\u79cd\u884c\u4e3a\u662f\u53d6\u51b3\u4e8e\u5b9e\u73b0\u7684\u3002\u6839\u636e [C++ Working Paper](https://timsong-cpp.github.io/cppwp/expr.delete#2)\uff0c\u4f7f\u7528 `new` \u548c `delete` \u800c\u4e0d\u662f `new[]` \u548c `delete[]` \u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\uff0c\u8fd9\u4f1a\u4f7f\u8c03\u8bd5\u53d8\u5f97\u4e00\u56e2\u7cdf\u3002\\n:::\\n\\n#### \u800c `new` \u548c `delete` \u4e0d\u8fc7\u662f\u5bf9 `malloc` \u548c `free` \u7684\u5c01\u88c5 {#and-new--delete-are-wrappers-of-malloc-and-free}\\n\\n\u8ba9\u6211\u4eec\u63a5\u4e0b\u6765\u770b\u770b `new` \u7684 [\u6e90\u7801](https://github.com/gcc-mirror/gcc/blob/releases/gcc-11.2.0/libstdc++-v3/libsupc++/new_op.cc#L41-L59)\u3002\u5b83\u4e5f\u53ea\u662f\u4e00\u4e2a\u5bf9 C \u4e2d\u7684 `malloc` \u52a0\u4e0a\u4e00\u4e9b\u9519\u8bef\u5904\u7406\u7684\u5c01\u88c5\uff0c\u5e76\u4f1a\u5728\u6700\u540e\u7ed9\u8c03\u7528\u8005 return \u4e00\u4e2a `malloc` \u8fd4\u56de\u7684\u539f\u59cb\u6307\u9488\u3002\\n\\n```cpp title=\\"/libstdc++-v3/libsupc++/new_op.cc:L41-59\\"\\n_GLIBCXX_WEAK_DEFINITION void *\\noperator new (std::size_t sz) _GLIBCXX_THROW (std::bad_alloc)\\n{\\n  void *p;\\n\\n  /* malloc (0) is unpredictable; avoid it.  */\\n  if (__builtin_expect (sz == 0, false))\\n    sz = 1;\\n\\n  while ((p = malloc (sz)) == 0)\\n    {\\n      new_handler handler = std::get_new_handler ();\\n      if (! handler)\\n\\t_GLIBCXX_THROW_OR_ABORT(bad_alloc());\\n      handler ();\\n    }\\n\\n  return p;\\n}\\n```\\n\\n`delete`\uff08[\u6e90\u7801](https://github.com/gcc-mirror/gcc/blob/releases/gcc-11.2.0/libstdc++-v3/libsupc++/del_op.cc#L46-L50)\uff09\u66f4\u52a0\u7b80\u5355\uff0c\u76f4\u63a5\u8c03\u7528\u4e86 C \u4e2d\u7684 `free`\u3002\\n\\n```cpp title=\\"libstdc++-v3/libsupc++/del_op.cc:L46-50\\"\\n_GLIBCXX_WEAK_DEFINITION void\\noperator delete(void* ptr) noexcept\\n{\\n  std::free(ptr);\\n}\\n```\\n\\n\x3c!-- ### How `malloc` and `free` works --\x3e\\n\\n\u8fd9\u6837\u4e00\u6765\uff0c\u6211\u4eec\u4f3c\u4e4e\u9700\u8981\u4e00\u8def\u6df1\u5165\u5230 C \u6807\u51c6\u5e93\u4e2d\u5bf9 `malloc` \u4e0e `free` \u7684\u5b9e\u73b0\u624d\u80fd\u77e5\u9053\u5728\u6570\u7ec4\u7684\u521b\u5efa\u4e0e\u9500\u6bc1\u80cc\u540e\u7a76\u7adf\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\\n\\n\u7136\u800c\uff0c\u6211\u4eec\u4e0d\u4f1a\u6db5\u76d6\u4e0e `malloc` \u76f8\u5173\u7684\u5168\u90e8\u5185\u5bb9\uff08\u8fd9\u4e9b\u5185\u5bb9\u672c\u8eab\u5c31\u8db3\u591f\u6491\u8d77\u53e6\u5916\u4e00\u7bc7\u6587\u7ae0\u4e86\uff09\uff0c\u6211\u4eec\u5c06\u4e3b\u8981\u5173\u6ce8 `malloc` \u5982\u4f55\u7ec4\u7ec7\u5b83\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\uff08\u7b54\u6848\uff1a\u5728\u5806\u4e0a\u6784\u5efa `malloc_chunk`\uff09\u4ee5\u53ca `free` \u662f\u5982\u4f55\u77e5\u9053\u53bb\u91ca\u653e\u54ea\u5757\u5185\u5b58\u7684\u3002\\n\\n### `malloc_chunk` \u7684\u7ed3\u6784\u662f\u4ec0\u4e48\u6837\u7684? {#how-are-malloc_chunks-structured}\\n\\n:::info\\n\u4e0e\u4e0a\u8282\u4e00\u6837\uff0c\u6211\u5c06\u4f7f\u7528 GNU \u5bf9 C \u6807\u51c6\u5e93\u7684\u5b9e\u73b0, \u5373 `glibc`\u3002\\nglibc \u7684\u5f53\u524d\u7248\u672c\u662f\u5728 2021 \u5e74 8 \u6708 2 \u65e5 release \u51fa\u7684 [glibc 2.34](https://sourceware.org/git/?p=glibc.git;a=tag;h=refs/tags/glibc-2.34)\u3002\\n:::\\n\\n\u4ee5\u4e0b\u5185\u5bb9\u6765\u81ea glibc \u4e2d `malloc/malloc.c` \u7684\u6ce8\u91ca\uff08[\u6e90\u7801](https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=e065785af77af72c17c773517c15b248b067b4ad;hb=ae37d06c7d127817ba43850f0f898b793d42aea7#l1168)\uff09\u3002\u4ee5\u4e0b\u5185\u5bb9\u4e3a\u82f1\u6587\u539f\u6587\uff0c\u6211\u53ef\u80fd\u4f1a\u5728\u4e4b\u540e\u67d0\u4e2a\u65f6\u5019\u8003\u8651\u5c06\u5176\u7ffb\u8bd1\u4e3a\u4e2d\u6587\u3002\u6211\u5728\u539f\u6587\u4e4b\u4e0a\u8fdb\u884c\u4e86\u4e00\u4e9b\u5fae\u5c0f\u7684\u7f16\u8f91\u4ee5\u5c06\u5176\u9002\u914d\u4e3a Markdown \u683c\u5f0f\uff08\u672c\u7f51\u7ad9\u4f7f\u7528\u7684\u683c\u5f0f\u5316\u5de5\u5177\uff09\u3002\\n\\n> (The following includes lightly edited explanations by Colin Plumb.)\\n>\\n> Chunks of memory are maintained using a `boundary tag\' method as\\n> described in e.g., Knuth or Standish. (See the paper by Paul\\n> Wilson [ftp://ftp.cs.utexas.edu/pub/garbage/allocsrv.ps](ftp://ftp.cs.utexas.edu/pub/garbage/allocsrv.ps) for a\\n> survey of such techniques.) Sizes of free chunks are stored both\\n> in the front of each chunk and at the end. This makes\\n> consolidating fragmented chunks into bigger chunks very fast. The\\n> size fields also hold bits representing whether chunks are free or\\n> in use.\\n>\\n> An allocated chunk looks like this:\\n>\\n> ```\\n>     chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n>             |             Size of previous chunk, if unallocated (P clear)  |\\n>             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n>             |             Size of chunk, in bytes                     |A|M|P|\\n>       mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n>             |             User data starts here...                          .\\n>             .                                                               .\\n>             .             (malloc_usable_size() bytes)                      .\\n>             .                                                               |\\n> nextchunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n>             |             (size of chunk, but used for application data)    |\\n>             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n>             |             Size of next chunk, in bytes                |A|0|1|\\n>             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n> ```\\n>\\n> Where \\"chunk\\" is the front of the chunk for the purpose of most of\\n> the malloc code, but \\"mem\\" is the pointer that is returned to the\\n> user. \\"Nextchunk\\" is the beginning of the next contiguous chunk.\\n>\\n> Chunks always begin on even word boundaries, so the mem portion\\n> (which is returned to the user) is also on an even word boundary, and\\n> thus at least double-word aligned.\\n>\\n> Free chunks are stored in circular doubly-linked lists, and look like this:\\n>\\n> ```\\n>     chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n>             |             Size of previous chunk, if unallocated (P clear)  |\\n>             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n>     `head:\' |             Size of chunk, in bytes                     |A|0|P|\\n>       mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n>             |             Forward pointer to next chunk in list             |\\n>             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n>             |             Back pointer to previous chunk in list            |\\n>             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n>             |             Unused space (may be 0 bytes long)                .\\n>             .                                                               .\\n>             .                                                               |\\n> nextchunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n>     `foot:\' |             Size of chunk, in bytes                           |\\n>             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n>             |             Size of next chunk, in bytes                |A|0|0|\\n>             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\\n> ```\\n>\\n> The P (`PREV_INUSE`) bit, stored in the unused low-order bit of the\\n> chunk size (which is always a multiple of two words), is an in-use\\n> bit for the _previous_ chunk. If that bit is _clear_, then the\\n> word before the current chunk size contains the previous chunk\\n> size, and can be used to find the front of the previous chunk.\\n> The very first chunk allocated always has this bit set,\\n> preventing access to non-existent (or non-owned) memory. If\\n> `prev_inuse` is set for any given chunk, then you CANNOT determine\\n> the size of the previous chunk, and might even get a memory\\n> addressing fault when trying to do so.\\n>\\n> [...]\\n>\\n> Note that the `foot` of the current chunk is actually represented\\n> as the `prev_size` of the NEXT chunk. This makes it easier to\\n> deal with alignments etc but can be very confusing when trying\\n> to extend or adapt this code.\\n>\\n> [...]\\n\\n### \u5229\u7528 PoC \u4ee3\u7801\u7684\u9a8c\u8bc1 {#a-verification-using-poc}\\n\\n\u73b0\u5728\u6211\u4eec\u5c06\u4f7f\u7528 `gdb` \u6253\u5370\u51fa\u5185\u5b58\u533a\u57df\u5e76\u9a8c\u8bc1\u4ee5\u4e0a\u7684\u89e3\u91ca\u5728\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u8fd9\u91cc\u6211\u5c06\u4f7f\u7528 [GEF](https://gef.readthedocs.io/en/master/commands/heap/#heap-chunk-command) \u7684 `heap` \u529f\u80fd\u6765\u66f4\u597d\u5730\u663e\u793a `malloc` \u5206\u914d\u7684 chunk \u7684\u5c5e\u6027\u3002\\n\\n```\\ngef\u27a4  heap chunk arr\\nChunk(addr=0x55555556aeb0, size=0x30, flags=PREV_INUSE)\\nChunk size: 48 (0x30)\\nUsable size: 40 (0x28)\\nPrevious chunk size: 0 (0x0)\\nPREV_INUSE flag: On\\nIS_MMAPPED flag: Off\\nNON_MAIN_ARENA flag: Off\\n\\ngef\u27a4  x/16xw 0x55555556aeb0-16\\n0x55555556aea0:\\t0x00000000\\t0x00000000\\t0x00000031\\t0x00000000\\n0x55555556aeb0:\\t0x44434241\\t0x48474645\\t0x4c4b4a49\\t0x504f4e4d\\n0x55555556aec0:\\t0x54535251\\t0x58575655\\t0x00005a59\\t0x00000000\\n0x55555556aed0:\\t0x00000000\\t0x00000000\\t0x0000f131\\t0x00000000\\n```\\n\\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cchunk \u7684\u5927\u5c0f\u662f 48 \u5b57\u8282\uff0c\u53ef\u7528\u5927\u5c0f\uff08\u5b9e\u9645\u5b58\u50a8\u7528\u6237\u5185\u5bb9\u7684\u533a\u57df\uff09\u4e3a 40 \u5b57\u8282\uff0c\u8981\u8fdc\u8fdc\u5927\u51fa\u6211\u4eec\u6240\u8bf7\u6c42\u7684\uff0826 \u4e2a\u5b57\u7b26\u7684\u6570\u7ec4\uff0c\u5e94\u5f53\u5360\u636e 26 \u5b57\u8282\u7684\u7a7a\u95f4\uff09\u3002\u8fd9\u662f\u56e0\u4e3a \u201cchunk \u6c38\u8fdc\u5f00\u59cb\u4e8e\u53cc\u6570 \u5b57\uff08word\uff09\u7684\u8fb9\u754c\u2026\u2026\u56e0\u6b64\u81f3\u5c11\u662f\u53cc\u5b57\u5bf9\u9f50\u7684\u201d[^1]\\n\\n[^1]: \\"chunks always begin on even word boundaries ... and thus at least double-word aligned.\\"\\n\\n:::info\\n\u4e00\u4e2a [\u5b57\uff08word\uff09](<https://zh.wikipedia.org/zh-cn/%E5%AD%97_(%E8%AE%A1%E7%AE%97%E6%9C%BA)>) \u7684\u5927\u5c0f\u662f\u53d6\u51b3\u4e8e\u7cfb\u7edf\u67b6\u6784\u7684\u3002\u4e00\u822c\u800c\u8a00\uff0c64 \u4f4d\u7cfb\u7edf\u7684\u5b57\u957f\u4e3a 64 \u6bd4\u7279\uff0c\u4e5f\u5c31\u662f 8 \u5b57\u8282\u3002\u7136\u800c\uff0c\u5728 `gdb` \u7684 `x/w` \u547d\u4ee4\u4e2d\uff0c\u5b57\u957f\u4e3a\u56fa\u5b9a\u7684 32 \u6bd4\u7279\uff084 \u5b57\u8282\uff09\uff0c\u975e\u5e38\u4ee4\u4eba\u8ff7\u60d1\u3002\u56e0\u6b64\uff0c\u6211\u5c06\u4f7f\u7528\u201c\u5b57\u201d\u4ee3\u6307\u73b0\u5b9e\u4e2d\u7684\u53d6\u51b3\u4e8e\u7cfb\u7edf\u7684\u53ef\u53d8\u957f\u5ea6\u7684\u5b57\uff0c\u800c\u4f7f\u7528\u201c32 \u6bd4\u7279\u5b57\u201d\u4ee3\u6307 `gdb` \u4e2d\u7684\u5b57\u3002\\n:::\\n\\n\u56e0\u4e3a\u5185\u5b58\u4e2d\u7684 chunk \u6c38\u8fdc\u662f\u53cc\u5b57\u5bf9\u9f50\u7684\uff0c\u6211\u4eec\u5e94\u8be5\u4ece\u5730\u5740\u4e2d\u51cf\u53bb $2\\\\times8=16$ \u5b57\u8282\u6765\u83b7\u5f97\u6307\u5411 `chunk` \u7684\u6307\u9488\u5730\u5740\u3002\u8fd9\u91cc\u7684\u7b2c\u4e00\u4e2a\u5b57\uff08\u5728 gdb \u4e2d\u663e\u793a\u4e3a\u4e24\u4e2a 32 \u6bd4\u7279\u5b57\uff09\u88ab `0x00` \u586b\u6ee1\u4e86\uff1b\u5e76\u4e14\u5c06\u5728 `P` flag \u88ab\u590d\u4f4d\u65f6\u586b\u5165\u4e0a\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u3002\\n\\n\u7b2c\u4e8c\u4e2a\u5b57 `0x31`\uff08\u6216\u662f `0b110001`\uff09\u5b58\u50a8\u4e86\u8be5 chunk \u7684\u5927\u5c0f\u4ee5\u53ca 3 \u4e2a flag\u3002\u6700\u4f4e\u6709\u6548\u4f4d\uff08LSB\uff09`0b1` \u4ee3\u8868 flag `P` (PREV_INUSE) \u88ab\u8bbe\u7f6e\u4e86\uff0c\u56e0\u6b64\u4e0a\u4e00\u4e2a chunk \u8fd8\u672a\u88ab\u91ca\u653e\u3002\u56e0\u4e3a\u6240\u6709 chunk \u7684\u5927\u5c0f\u90fd\u5fc5\u987b\u81f3\u5c11\u662f 8 \u5b57\u8282\u7684\u6574\u6570\u500d\uff0c\u56e0\u6b64\u5176\u5927\u5c0f\u7684 3 \u4e2a\u6700\u4f4e\u6709\u6548\u4f4d\u90fd\u5fc5\u5b9a\u4e3a 0\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u8fd9\u4e09\u4f4d LSB \u80fd\u88ab\u7528\u4f5c flag\u3002\u5728\u8ba1\u7b97 chunk \u5927\u5c0f\u65f6\uff0c\u6211\u4eec\u80fd\u591f\u76f4\u63a5\u4e22\u5f03\u4e09\u4f4d LSB \u5e76\u53d6\u5f97 `0b110000`\uff08`0x30`\uff0c\u6216\u662f 48\uff09\u5b57\u8282\u3002\\n\\n:::note\\n\\n\u5982\u679c\u4f60\u8db3\u591f\u4ed4\u7ec6\u7684\u8bdd\uff0c\u4f60\u53ef\u80fd\u5df2\u7ecf\u53d1\u73b0\u4e86\uff1achunk \u7684\u53ef\u7528\u5927\u5c0f\u662f 40 \u5b57\u8282\uff0c\u53ea\u6bd4 chunk \u5927\u5c0f\u5c0f\u4e86 8 \u5b57\u8282\uff08\u800c\u4e0d\u662f 16\uff09\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u5b57\u3002\\n\\n\u8fd9\u662f\u56e0\u4e3a `chunk` \u6307\u9488 \u201c\u6307\u5411\u7684\u5e76\u4e0d\u662f\u672c chunk \u7684\u5f00\u59cb\uff0c\u800c\u662f\u4e0a\u4e00 chunk \u7684\u6700\u540e\u4e00\u5b57\u201d[^2]\uff08[\u6765\u6e90](https://sourceware.org/glibc/wiki/MallocInternals#What_is_a_Chunk.3F)\uff09\u3002\u5b9e\u9645\u4e0a\uff0cchunk \u5f00\u59cb\u4e8e `chunk` \u6307\u9488\u6307\u5411\u7684\u540e\u4e00\u4e2a\u5b57\uff08\u4e5f\u5c31\u662f\u5b58\u50a8 chunk \u5927\u5c0f\u7684\u5b57\uff09\u3002\\n\\n[^2]: \\"does not point to the beginning of the chunk, but to the last word in the previous chunk\\"\uff08[\u6765\u6e90](https://sourceware.org/glibc/wiki/MallocInternals#What_is_a_Chunk.3F)\uff09\\n\\n:::\\n\\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec \u201c\u5b9e\u9645\u7684\u201d chunk \u5f00\u59cb\u4e8e\u5185\u5b58\u5730\u5740 `0x55555556aea8` \u5e76\u7ed3\u675f\u4e8e `0x55555556aec8`\u3002\u6570\u636e\u533a\u57df\u5f00\u59cb\u4e8e `0x55555556aeb0` \u5e76\u7ed3\u675f\u4e8e `0x55555556aec8`\u3002\u540c\u7406\uff0c\u4e0b\u4e00\u4e2a `chunk` \u6307\u9488\u6307\u5411\u7684\u662f\u672c chunk \u7684\u6570\u636e\u533a\u57df\u7684\u6700\u540e\u4e00\u4e2a\u5b57\uff08`0x55555556aec8`\uff09\u3002\\n\\n\u65e2\u7136\u5982\u6b64\uff0c\u4e3a\u4ec0\u4e48 chunk \u6307\u9488\u4f1a\u4ee4\u4eba\u8ff7\u60d1\u5730\u6307\u5411\u524d\u4e00 chunk \u7684\u6700\u540e\u4e00\u5b57\u5462\uff1f\u7b54\u6848\u4e0e `free` \u8bbe\u8ba1\u7684\u7406\u5ff5\u6709\u5173\u3002\\n\\n\u5f53\u524d\u4e00\u4e2a chunk \u88ab free \u65f6\uff0c\u5b83\u4f1a\u628a\u6700\u540e\u4e00\u5b57\u586b\u5145\u4e3a\u5b83\u7684\u5927\u5c0f\uff0c\u5e76\u6e05\u9664\u4e0b\u4e00\u4e2a chunk\uff08\u672c chunk\uff09\u4e2d\u7684 P flag\u3002\u8fd9\u6837\uff0c\u672c chunk \u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u5927\u5c0f\u5728\u524d\u4e00 chunk \u88ab\u91ca\u653e\u540e \u201c\u627e\u5230\u524d\u4e00 chunk \u7684\u8d77\u59cb\u4f4d\u7f6e\u201d [^3]\u3002\\n\\n[^3]: \\"to find the front of the previous chunk\\"\\n\\n### `free` \u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f {#how-does-free-work}\\n\\n\u5230\u73b0\u5728\uff0c\u4f60\u5e94\u8be5\u5df2\u7ecf\u77e5\u9053 \u201c`delete[]` \u5982\u4f55\u77e5\u9053\u5b83\u9700\u8981\u91ca\u653e\u54ea\u5757\u5185\u5b58\uff1f\u201d \u7684\u7b54\u6848\u4e86\uff1a\u56e0\u4e3a\u8fd9\u4e2a chunk \u7684\u5927\u5c0f\u5c31\u88ab\u5b58\u50a8\u5728\u5b83\u7684\u5143\u6570\u636e\u4e2d\u3002\\n\\n\u4f46\u662f\uff0c\u8fd8\u662f\u6709\u4e00\u4e9b\u7ec6\u8282\u503c\u5f97\u6211\u4eec\u8fdb\u884c\u63a2\u8ba8\uff1a\u4e3a\u4ec0\u4e48 chunk \u6307\u9488\u8981\u6307\u5411\u4e0a\u4e00 chunk \u7684\u7ed3\u5c3e\uff1f\u6211\u4eec\u4e3a\u4ec0\u4e48\u9700\u8981 `PREV_INUSE` (P) flag\uff1f\u4e3a\u4e86\u89e3\u7b54\u8fd9\u4e9b\u7591\u95ee\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3 `free` \u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\\n\\n:::note\\n\u5728\u9605\u8bfb\u672c\u8282\u65f6\uff0c\u4f60\u53ef\u4ee5\u4e0e [`malloc_chunk` \u7684\u7ed3\u6784\u662f\u4ec0\u4e48\u6837\u7684?](#how-are-malloc_chunks-structured) \u8282\u8fdb\u884c\u4ea4\u53c9\u5bf9\u7167\uff0c\u4ee5\u67e5\u770b chunk \u5728 `free` \u524d\u540e\u7684\u7ed3\u6784\u5206\u522b\u662f\u4ec0\u4e48\u6837\u5b50\u7684\u3002\\n:::\\n\\n\u957f\u8bdd\u77ed\u8bf4\uff0c`free` \u5927\u81f4\u662f\u5982\u4e0b\u5de5\u4f5c\u7684\u3002\u5f53\u5b83\u88ab\u8c03\u7528\u65f6\uff08[\u6e90\u7801](https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=e065785af77af72c17c773517c15b248b067b4ad;hb=ae37d06c7d127817ba43850f0f898b793d42aea7#l3237)\uff09\uff0c\u7528\u6237\u4f1a\u4f20\u7ed9\u5b83\u4e00\u4e2a\u6307\u5411\u6570\u636e\u5730\u5740\u7684\u6307\u9488\u3002`free` \u5219\u4f1a\u8c03\u7528 `mem2chunk`\uff08[\u6e90\u7801](https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=e065785af77af72c17c773517c15b248b067b4ad;hb=ae37d06c7d127817ba43850f0f898b793d42aea7#l1310)\uff09\u5c06\u5176\u8f6c\u6362\u4e3a\u6307\u5411 chunk \u5934\u7684\u6307\u9488\u3002\\n\u968f\u540e\uff0c\u5982\u679c\u8fd9\u4e00 chunk \u662f\u88ab `mmap` \u5206\u914d\u7684\uff08\u53ef\u7531 M flag \u5f97\u77e5\uff09\uff0c`free` \u4f1a\u8c03\u7528 `munmap`\uff08[man 3p](https://man.archlinux.org/man/munmap.3p.en) | [man 2](https://man.archlinux.org/man/munmap.2.en)\uff09\u8fdb\u884c\u91ca\u653e\uff1b\u5982\u679c\u4e0d\u662f\uff0c\u5b83\u4f1a\u5c06 chunk \u6307\u9488\u4f20\u7ed9 `_int_free`\uff08[\u6e90\u7801](https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=e065785af77af72c17c773517c15b248b067b4ad;hb=ae37d06c7d127817ba43850f0f898b793d42aea7#l4302)\uff09\u6b63\u5f0f\u8fdb\u884c\u91ca\u653e\u3002\\n\\n\u7136\u800c\uff0c `free` \u4e00\u4e2a chunk \u201c\u5e76\u4e0d\u4f1a\u5c06\u5176\u4ea4\u8fd8\u64cd\u4f5c\u7cfb\u7edf\u4ee5\u7ed9\u5176\u4ed6\u7a0b\u5e8f\u4f7f\u7528\u3002`free()` \u8c03\u7528\u4ec5\u4ec5\u662f\u5c06\u8fd9\u5757\u5185\u5b58\u6807\u8bb0\u4e3a \u2018\u53ef\u88ab\u672c\u7a0b\u5e8f\u91cd\u65b0\u4f7f\u7528\u2019\uff0c\u4f46\u5bf9\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u800c\u8a00\uff0c\u8fd9\u5757\u5185\u5b58\u4ecd\u7136 \u2018\u5c5e\u4e8e\u2019 \u5e94\u7528\u7a0b\u5e8f\u201d[^4]\uff08[\u6765\u6e90](https://sourceware.org/glibc/wiki/MallocInternals#Free_Algorithm)\uff09\u7684\u5806\u4e0a\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5806\u7ba1\u7406\u5668\u4ecd\u7136\u9700\u8981\u8ffd\u8e2a\u8fd9\u5757\u5185\u5b58\uff0c\u5e76\u5728\u5408\u9002\u7684\u65f6\u5019\u91cd\u65b0\u4f7f\u7528\u5b83\u3002\\n\\n[^4]: \\"does not actually return it to the operating system for other applications to use. The `free()` call marks a chunk of memory as \'free to be reused\' by the application, but from the operating system\'s point of view, the memory still \'belongs\' to the application\\"\uff08[\u6765\u6e90](https://sourceware.org/glibc/wiki/MallocInternals#Free_Algorithm)\uff09\\n\\n\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u5faa\u73af\u94fe\u8868\u6765\u7ec4\u7ec7\u88ab `free` \u7684 chunk \u4eec\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a chunk \u90fd\u5b58\u50a8\u4e86\u6307\u5411\u524d\u4e00\u4e2a\u4e0e\u540e\u4e00\u4e2a chunk \u7684\u6307\u9488\u3002\u6b64\u5916\uff0c\u6bcf\u4e2a chunk \u7684\u5927\u5c0f\u4f1a\u88ab\u5b58\u50a8\u5728\u5b83\u5185\u5b58\u7684\u6700\u540e\u4e00\u4e2a\u5b57\uff0c\u5373\u4e0b\u4e00\u4e2a chunk \u7684 `chunk` \u6307\u9488\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u4e0b\u4e00\u4e2a chunk \u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u5927\u5c0f\u8bbf\u95ee\u8fd9\u4e2a\u88ab `free` \u7684 chunk \u4ee5\u53ca\u5b83\u7684 header\u3002\u5f53\u4e0b\u4e00\u4e2a chunk \u4e5f\u88ab `free` \u65f6\uff0c\u6211\u4eec\u80fd\u591f\u5229\u7528\u8fd9\u4e00\u5c5e\u6027\u6765 \u5408\u5e76\uff08[coalesce](https://cs.stackexchange.com/a/18234)\uff09\u8fd9\u4e24\u4e2a chunk\u3002\\n\\n\u5f53\u7136\u4e86\uff0c\u5b9e\u9645\u7684 `free` \u64cd\u4f5c\u8981\u8fdc\u6bd4\u8fd9\u590d\u6742\uff0c\u4e14 chunk \u4eec\u4e5f\u4f1a\u4e3a\u4e86\u66f4\u9ad8\u6548\u7684\u518d\u5206\u914d\uff08reallocation\uff09\u88ab\u653e\u7f6e\u5230\u4e0d\u540c\u7684 bin \u4e2d\u3002 \u4f60\u53ef\u4ee5\u9605\u8bfb\u5b98\u65b9\u7684 [glibc wiki](https://sourceware.org/glibc/wiki/MallocInternals)\uff0c\u8fd9\u7bc7\u66f4\u4e3a\u8be6\u7ec6\u7684 [\u535a\u6587](https://azeria-labs.com/heap-exploitation-part-2-glibc-heap-free-bins/)\uff0c\u6216\u662f [`_int_free` \u7684\u6e90\u7801](https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=e065785af77af72c17c773517c15b248b067b4ad;hb=ae37d06c7d127817ba43850f0f898b793d42aea7#l4302) \u4ee5\u4e86\u89e3\u66f4\u591a\u5e95\u5c42\u7ec6\u8282\u3002\\n\\n## \u6211\u4eec\u5982\u4f55\u9884\u9632\u5185\u5b58\u6cc4\u6f0f\uff1f {#how-can-we-prevent-memory-leaks}\\n\\n\u73b0\u5728\u53ef\u80fd\u662f\u65f6\u5019\u56de\u5230\u6211\u4eec\u5f00\u59cb\u7684\u4e3b\u9898\u4e86\uff1a\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5185\u5b58\u6cc4\u6f0f\u662f\u4ec0\u4e48\uff0c\u4ee5\u53ca\u5b83\u4eec\u662f\u5982\u4f55\u53d1\u751f\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u4ec0\u4e48\u529e\u6cd5\u9884\u9632\u5185\u5b58\u6cc4\u6f0f\u5417\uff1f\\n\\n1. \u6c38\u8fdc `delete` (`delete[]`) \u4f7f\u7528 `new` (`new[]`) \u521b\u5efa\u7684\u5bf9\u8c61\\n   - \u8fd9\u662f\u6211\u4eec\u80fd\u505a\u7684\u6700\u7b80\u5355\u7684\u4e8b\u60c5\uff0c\u5982\u679c\u4f60\u4ecd\u7136\u575a\u6301\u4f7f\u7528 `new` \u7684\u8bdd\\n2. \u907f\u514d\u76f4\u63a5\u8c03\u7528 `new` \u4e0e `delete`\\n   - [\u8bf4\u660e](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#r11-avoid-calling-new-and-delete-explicitly)\uff08\u82f1\u8bed\uff09\\n   - **\u592a\u957f\u4e0d\u770b**\uff1a\u4f7f\u7528\u8d44\u6e90\u53e5\u67c4\uff08resource handle\uff09\u800c\u4e0d\u662f\u88f8\u6307\u9488\uff0c\u540e\u8005\u5177\u6709\u6cc4\u6f0f\u7684\u53ef\u80fd\u6027\u3002\\n   - \u89e3\u51b3\u65b9\u6cd5\uff1a\u4f7f\u7528\u8bf8\u5982 `unique_ptr` \u4e0e `shared_ptr` \u7684\u667a\u80fd\u6307\u9488\u3002\\n3. \u4e0d\u8981\u7528\u88f8\u6307\u9488\uff08`T*`\uff09\u6216\u5f15\u7528\uff08`T&`\uff09\u6765\u8f6c\u79fb\u6240\u6709\u6743\uff08ownership\uff09\\n   - [\u8bf4\u660e](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#i11-never-transfer-ownership-by-a-raw-pointer-t-or-reference-t)\uff08\u82f1\u8bed\uff09\\n   - **\u592a\u957f\u4e0d\u770b**\uff1a\u5bb9\u6613\u4ea7\u751f\u201c\u8c01\u5e94\u5f53\u5220\u9664\u6307\u9488\u201d\u7684\u6b67\u4e49\u3002\\n   - \u89e3\u51b3\u65b9\u6cd5\uff1a\u76f4\u63a5 return \u5bf9\u8c61\u672c\u8eab\uff0c\u6216\u662f\u4f7f\u7528\u667a\u80fd\u6307\u9488\u3002\\n\\n\u4e00\u822c\u6765\u8bf4\uff0c\u8981\u6c42\u7a0b\u5e8f\u5458\u624b\u52a8\u91ca\u653e\u8d44\u6e90\u662f\u5f88\u5bb9\u6613\u51fa\u9519\u7684\u3002\u4f60\u5e94\u8be5\u8003\u8651 [\u4f7f\u7528\u8d44\u6e90\u53e5\u67c4\u548c RAII\uff08\u8d44\u6e90\u83b7\u53d6\u5373\u521d\u59cb\u5316\uff09\u81ea\u52a8\u7ba1\u7406\u8d44\u6e90](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-raii)\uff08\u82f1\u8bed\uff09\u3002\\n\\n## \u5f15\u7528 & \u6269\u5c55\u9605\u8bfb {#references--further-readings}\\n\\n- Stroustrup, Bjarne and Sutter, Herb. [\\"C++ Core Guidelines\\"](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines). Updated Jun 17, 2021. Accessed Aug 08, 2021.\\n- glibc wiki. [\\"MallocInternals\\"](https://sourceware.org/glibc/wiki/MallocInternals). Updated May 20, 2019. Accessed Aug 08, 2021.\\n- Azeria Labs. [\\"Heap Exploitation Part 2: Understanding the Glibc Heap Implementation\\"](https://azeria-labs.com/heap-exploitation-part-2-glibc-heap-free-bins/). Accessed Aug 08, 2021.\\n- CTF Wiki. [\\"\u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784\\"](https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/heap-structure/) (in Chinese). Accessed Aug 10, 2021.\\n- glibc Contributors. [glibc v2.34 source code](https://sourceware.org/git/?p=glibc.git;a=tree;h=6eb9f63e6c9197e967a8cc12a8b235335e5a873d;hb=ae37d06c7d127817ba43850f0f898b793d42aea7). Aug 2, 2021. Accessed Aug 8, 2021.\\n- gcc Contributors. [gcc v11.2.0 source code](https://github.com/gcc-mirror/gcc/tree/releases/gcc-11.2.0). Jul 28, 2021. Accessed Aug 8, 2021.\\n- StackOverflow. [\\"How does delete[] know the size of the operand array?\\"](https://stackoverflow.com/questions/197675/how-does-delete-know-the-size-of-the-operand-array)\\n\\n\u987a\u5e26\u4e00\u63d0\uff0c\u5728\u641c\u7d22\u5185\u5b58\u6cc4\u6f0f\u7684\u65f6\u5019\uff0c\u6211\u5728 Brookhaven National Lab \u7684\u57df\u540d\u4e0b\u9762\u53d1\u73b0\u4e86\u4e00\u4e2a \u5927\u4e9a\u6e7e\u53cd\u5e94\u5806\u4e2d\u5fae\u5b50\u5b9e\u9a8c\u7684 wiki \u9875\u9762 [\\"Dealing With Memory Leaks\\"](https://wiki.bnl.gov/dayabay/index.php?title=Dealing_With_Memory_Leaks)\u3002\u6211\u90fd\u4e0d\u77e5\u9053\u5927\u4e9a\u6e7e\u53cd\u5e94\u5806\u8fd8\u6709\u4e00\u4e2a\u56fd\u9645\u7814\u7a76\u9879\u76ee \ud83d\ude02"},{"id":"welcome","metadata":{"permalink":"/zh-Hans/blog/welcome","editUrl":"https://github.com/yechs/website/edit/master/blog/blog/2021-04-22-welcome.md","source":"@site/blog/2021-04-22-welcome.md","title":"Me and My Broken Site(s)","description":"My personal website is finally up and running today! It is already 821 days after I purchased this domain (huh I\'m such big a procrastinator). I also have a blog running on the subdomain blog.shuye.dev for some longer and possibly non tech-related blog posts.","date":"2021-04-22T00:00:00.000Z","formattedDate":"2021\u5e744\u670822\u65e5","tags":[{"label":"events","permalink":"/zh-Hans/blog/tags/events"},{"label":"essays","permalink":"/zh-Hans/blog/tags/essays"}],"readingTime":1.855,"truncated":true,"authors":[{"name":"Ye Shu","title":"Celebrating the launching of my new website","url":"https://github.com/yechs","imageURL":"https://avatars.githubusercontent.com/u/49149993"}],"prevItem":{"title":"\u5185\u5b58\u6cc4\u6f0f \u4e0e malloc chunk","permalink":"/zh-Hans/blog/malloc_chunk"}},"content":"My personal website is finally up and running today! It is already 821 days after I purchased this domain (huh I\'m such big a procrastinator). I also have a blog running on the subdomain [blog.shuye.dev](https://blog.shuye.dev/) for some longer and possibly non tech-related blog posts.\\n\\nThis is not the first personal website I\'ve ever made. I coded my very first personal website in 2014 using static HTML and CSS (that was the time when most websites were still using HTML 4.01 and you had to decide whether you want a \\"strict\\" version of HTML), after a bit of self-learning with W3Schools. In fact, I wasn\'t even learning from the true [W3Schools](https://w3schools.com), but [an imitation of it](https://web.archive.org/web/20140103013237/http://w3school.com.cn/).\\n\\n\x3c!--truncate--\x3e\\n\\nThat was my first step, before I got into building more complicated (and dynamic!) websites using PHP, with the help from lecture videos of [Harvard\'s open course CS75](http://cs75.tv/2012/summer/). Shortly afterwards, I hosted my first dynamic website on the free hosting space RedHat OpenShift by 2016 (though it served more as a proxy server for me to get around the Internet censorship\u2014that would be the topic of some other day). Sadly, all these codes were lost during the years (I didn\'t even know how to use git at that time).\\n\\nSince then, I have hosted different sorts of personal websites: portfolios, WordPress blogs, and many lightweight alternatives like typecho or hugo. But to be honest I was more interested in the process of trying out new frameworks or toolsets, instead of actually settling down and writing something. And what use are websites of if not for sharing information?\\n\\nIn fact, that\'s what motivates me to still build blogs and websites to this day, in the year of 2021, when most people are turning to centralized social media platforms like WeChat, Instagram, Twitter ..., when small websites are almost extinct from public sight. I became so fed up by the frequent warnings of \\"sensitive words\\" that force me to water down and censor my comments so I finally decided to start (again) a website of my own to at least have a place to myself where I can actually write something undisturbed. And that\'s why, out of the innumerable possibilities, you are reading this article right now."}]}')}}]);